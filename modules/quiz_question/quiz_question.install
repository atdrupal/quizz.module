<?php

use Drupal\quiz_question\Schema\Schema7060;

/**
 * @file
 * quiz_question.install
 *
 * The installer file for quiz_question.
 */

/**
 * Implements hook_schema().
 */
function quiz_question_schema() {
  require_once dirname(__FILE__) . '/src/Schema/Schema7060.php';
  $schema = new Schema7060();
  return $schema->get();
}

/**
 * Make the question body visible by default for the question view mode
 */
function quiz_question_update_7401() {
  foreach (array_keys(quiz_question_get_handler_info()) as $question_type) {
    $instance = field_read_instance('node', 'body', $question_type);

    $instance['display']['question'] = array(
        'label'    => 'hidden',
        'type'     => 'text_default',
        'weight'   => 1,
        'settings' => array(),
        'module'   => 'text',
    );

    field_update_instance($instance);
  }
}

/**
 * Add fields for general question feedback.
 */
function quiz_question_update_7500() {
  db_drop_primary_key('quiz_question_properties');
  db_add_field('quiz_question_properties', 'qqp_id', array('type' => 'serial'), array('primary key' => array('qqp_id')));
  db_add_field('quiz_question_properties', 'feedback', array('type' => 'text'));
  db_add_field('quiz_question_properties', 'feedback_format', array('type' => 'varchar', 'length' => 255, 'not null' => FALSE));

  if (module_exists('truefalse')) {
    // Migrate the truefalse feedback, since we have generic feedback now.
    $filter = filter_default_format();
    db_query("UPDATE {quiz_question_properties} qqp
    INNER JOIN {quiz_truefalse_node} qtn ON (qtn.vid = qqp.vid)
    SET qqp.feedback = qtn.feedback, qqp.feedback_format = :format", array(':format' => $filter));

    // Drop old field.
    db_drop_field('quiz_truefalse_node', 'feedback');
  }

  return t('Added global quiz question feedback fields and migrated true/false feedback.');
}

/**
 * Create new tables for question and question type entities.
 */
function quiz_question_update_7600() {
  require_once dirname(__FILE__) . '/src/Schema/Schema7060.php';
  $schema = new Schema7060();
  $tables = $schema->get();

  db_create_table('quiz_question_type', $tables['quiz_question_type']);
  db_create_table('quiz_question', $tables['quiz_question']);
  db_create_table('quiz_question_revision', $tables['quiz_question_revision']);

  // Flush cache to make sure the question entity types is defined
  drupal_flush_all_caches();
}

/**
 * Create question bundles from question node types.
 */
function quiz_question_update_7601() {
  $node_types = db_select('node_type')
    ->condition('module', 'quiz_question')
    ->fields('node_type')
    ->execute()
    ->fetchAll();
  foreach ($node_types as $node_type) {
    $labels[] = $node_type->type;
    $question_type = entity_create('quiz_question_type', array(
        'type'        => $node_type->type,
        'label'       => $node_type->name,
        'description' => $node_type->description,
        'help'        => $node_type->help,
        'handler'     => $node_type->type,
        'data'        => array(
            'multilingual' => (int) variable_get('language_content_type_' . $node_type->type, 0)
        )
    ));
    $question_type->save();
  }
  return 'Created new question bundle: ' . implode(', ', $labels);
}

/**
 * Change owner for question node types.
 */
function quiz_question_update_7602() {
  db_update('node_type')
    ->fields(array('module' => 'node', 'base' => 'node_content', 'disabled' => 0))
    ->condition('base', 'quiz_question')
    ->execute();
  return 'Change owner for quiz node type.';
}

/**
 * Create temp columns for next update scripts.
 */
function quiz_question_update_7603() {
  db_add_field('quiz_question', 'node_nid', array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0));
  db_add_field('quiz_question_revision', 'node_vid', array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0));
  db_add_index('quiz_question', 'question_node', array('node_nid'));
  db_add_index('quiz_question_revision', 'question_node', array('node_vid'));
}

/**
 * @TODO: Migrate question nodes to question entities.
 */
function quiz_question_update_7604() {
  foreach (module_implements('quiz_question_info') as $module) {
    $select = db_select('node_revision', 'r');
    $select->innerJoin('node', 'n', 'r.nid = n.nid');
    $node_revisions = $select
      ->fields('r', array('nid', 'vid', 'uid', 'title', 'log', 'timestamp', 'status'))
      ->fields('n', array('type', 'language', 'created', 'changed'))
      ->condition('n.type', $module)
      ->orderBy('r.vid')
      ->execute()
      ->fetchAll();
    foreach ($node_revisions as $node_revision) {
      // …
    }
  }
}

/**
 * @TODO: Other steps
 */
function quiz_question_update_7609() {
  return '…';
}

/**
 * Clean up migration's temp data.
 */
function quiz_question_update_7610() {
  db_drop_index('quiz_question', 'question_node');
  db_drop_index('quiz_question_revision', 'question_node');
  db_drop_field('quiz_question', 'node_nid');
  db_drop_field('quiz_question_revision', 'node_vid');
  return 'Cleaned up migration\'s temp columns.';
}

/**
 * Drop {quiz_question_properties} table.
 */
function quiz_question_update_7611() {
  db_drop_table('quiz_question_properties');
  return 'Dropped {quiz_question_properties} table.';
}

/**
 * Rename {quiz_question_type}.plugin to *.handler
 */
function quiz_question_update_7612() {
  if (!db_field_exists('quiz_question_type', 'handler')) {
    $spec = array('type' => 'varchar', 'length' => 32, 'not null' => TRUE, 'description' => 'Question handler type (shortanswer, longanswer, truefalse, …)');
    db_change_field('quiz_question_type', 'plugin', 'handler', $spec);
  }
}
