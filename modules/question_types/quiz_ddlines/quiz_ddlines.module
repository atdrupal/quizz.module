<?php

/**
 * Drag and drop with lines question type for the Quiz module.
 */
use Drupal\quiz_question\Entity\QuestionType;

define('QUIZ_DDLINES_WRONG', 1);
define('QUIZ_DDLINES_CORRECT', 2);

/**
 * Implements hook_quiz_question_info().
 */
function quiz_ddlines_quiz_question_info() {
  return array(
      'quiz_ddlines' => array(
          'name'              => t('Drag and drop question with lines'),
          'description'       => t('This provides drag and drop question type with lines.'),
          'question provider' => 'Drupal\quiz_ddlines\DDLinesQuestion',
          'response provider' => 'Drupal\quiz_ddlines\DDLinesResponse',
          'module'            => 'quiz_question', // All wrapper functions are in that module.
      ),
  );
}

/**
 * Implements hook_image_default_styles
 */
function quiz_ddlines_image_default_styles() {
  return array(
      'quiz_ddlines' => array(
          'effects' => array(
              array(
                  'name'   => 'image_scale',
                  'data'   => array('width' => 700, 'height' => null, 'upscale' => 0),
                  'weight' => 0,
              ),
          ),
      )
  );
}

/**
 * Implements hook_theme().
 */
function quiz_ddlines_theme() {
  return array(
      'quiz_ddlines_response' => array(
          'variables' => array('result' => array()),
          'path'      => drupal_get_path('module', 'quiz_ddlines') . '/theme',
          'file'      => 'quiz_ddlines.theme.inc',
      ),
  );
}

/**
 * Implements hook_quiz_question_config().
 */
function quiz_ddlines_quiz_question_config(QuestionType $question_type) {
  $form['quiz_ddlines_canvas_width'] = array(
      '#type'          => 'textfield',
      '#title'         => t('The default width of the canvas'),
      '#default_value' => $question_type->getConfig('quiz_ddlines_canvas_width', 700),
  );
  $form['quiz_ddlines_canvas_height'] = array(
      '#type'          => 'textfield',
      '#title'         => t('The default height of the canvas'),
      '#default_value' => $question_type->getConfig('quiz_ddlines_canvas_height', 500),
  );
  $form['quiz_ddlines_hotspot_radius'] = array(
      '#type'          => 'textfield',
      '#title'         => t('The radius of the hotspot'),
      '#default_value' => $question_type->getConfig('quiz_ddlines_hotspot_radius', 10),
  );
  $form['quiz_ddlines_pointer_radius'] = array(
      '#type'          => 'textfield',
      '#title'         => t('The radius of the pointer'),
      '#default_value' => $question_type->getConfig('quiz_ddlines_pointer_radius', 5),
  );
  $form['quiz_ddlines_feedback_correct'] = array(
      '#type'          => 'textfield',
      '#title'         => t('Default feedback for correct answers'),
      '#default_value' => $question_type->getConfig('quiz_ddlines_feedback_correct', ''),
  );
  $form['quiz_ddlines_feedback_wrong'] = array(
      '#type'          => 'textfield',
      '#title'         => t('Default feedback for wrong answers'),
      '#default_value' => $question_type->getConfig('quiz_ddlines_feedback_wrong', ''),
  );

  $form['#validate'][] = 'quiz_ddlines_config_validate';
  return $form;
}

/**
 * Validate the config form values
 */
function quiz_ddlines_config_validate($form, $form_state) {
  $int_fields = array('quiz_ddlines_canvas_width', 'quiz_ddlines_canvas_height', 'quiz_ddlines_hotspot_radius', 'quiz_ddlines_pointer_radius');
  foreach ($int_fields as $field) {
    if (!quiz_valid_integer($form_state['values'][$field])) {
      form_set_error($field, t('The value must be a positive number'));
    }
  }

  // Feedback fields may contain nothing or everything; no need to validate it
}

function _quiz_ddlines_add_js_and_css() {
  $module_path = drupal_get_path('module', 'quiz_ddlines');

  drupal_add_js($module_path . '/js/raphael-min.js');
  drupal_add_js($module_path . '/js/colorwheel.js');
  drupal_add_js($module_path . '/js/quiz_ddlines.js');
  drupal_add_css($module_path . '/theme/quiz_ddlines.css');
}
