<?php

/**
 * Test class for short answer.
 */
class ShortAnswerTestCase extends QuizTestCase {

  protected $questionHandler = 'short_answer';

  public static function getInfo() {
    return array(
        'name'        => t('Short answer'),
        'description' => t('Test cases for Short answers question type.'),
        'group'       => 'Quiz question',
    );
  }

  function setUp($modules = array(), $admin_permissions = array(), $user_permissions = array()) {
    $modules[] = 'short_answer';
    $admin_permissions[] = 'score any quiz';
    parent::setUp($modules, $admin_permissions, $user_permissions);
  }

  /**
   * Test case insensitive graded questions.
   */
  public function testGradeAnswerInsensitive() {
    $question = $this->testCreateQuizQuestion(array(
        'correct_answer_evaluation' => ShortAnswerQuestion::ANSWER_INSENSITIVE_MATCH,
        'correct_answer'            => 'the Zero One Infinity rule',
    ));
    $quiz = $this->linkQuestionToQuiz($question);

    // Login as our privileged user.
    $this->drupalLogin($this->user);

    // Test incorrect.
    $this->drupalGet("quiz/$quiz->qid/take");
    $this->drupalPost(NULL, array("question[$question->qid]" => 'This is an incorrect answer.'), t('Finish'));
    $this->assertText('Your score: 0%');

    // Test correct.
    $this->drupalGet("quiz/$quiz->qid/take");
    $this->drupalPost(NULL, array("question[$question->qid]" => 'the Zero One Infinity rule'), t('Finish'));
    $this->assertText('Your score: 100%');

    // Test correct.
    $this->drupalGet("quiz/$quiz->qid/take");
    $this->drupalPost(NULL, array("question[$question->qid]" => 'the zero one Infinity rule'), t('Finish'));
    $this->assertText('Your score: 100%');
  }

  /**
   * Test case sensitive graded questions.
   */
  public function testGradeAnswerSensitive() {
    $quiz = $this->drupalCreateQuiz(array(
        'review_options' => array('end' => array('score' => 'score')),
    ));

    $question = $this->testCreateQuizQuestion(array(
        'correct_answer_evaluation' => ShortAnswerQuestion::ANSWER_MATCH,
        'correct_answer'            => 'the Zero One Infinity rule',
    ));
    $this->linkQuestionToQuiz($question, $quiz);

    // Login as non-admin
    $this->drupalLogin($this->user);

    // Test incorrect.
    $this->drupalGet("quiz/$quiz->qid/take");
    $this->drupalPost(NULL, array("question[$question->qid]" => 'the zero one Infinity rule'), t('Finish'));
    $this->assertText('Your score: 0%');

    // Test correct.
    $this->drupalGet("quiz/$quiz->qid/take");
    $this->drupalPost(NULL, array("question[$question->qid]" => 'the Zero One Infinity rule'), t('Finish'));
    $this->assertText('Your score: 100%');
  }

  /**
   * Test regex graded questions.
   */
  public function testGradeAnswerRegex() {
    $quiz = $this->drupalCreateQuiz();

    $question = $this->testCreateQuizQuestion(array(
        'correct_answer_evaluation' => ShortAnswerQuestion::ANSWER_REGEX,
        'correct_answer'            => '/Zero One Infinity/i',
    ));
    $this->linkQuestionToQuiz($question, $quiz);

    // Test incorrect.
    $this->drupalLogin($this->user);
    $this->drupalGet("quiz/$quiz->qid/take");
    $this->drupalPost(NULL, array("question[$question->qid]" => 'um some rule, I forget'), t('Finish'));
    $this->assertText('Your score: 0%');

    // Test correct.
    $this->drupalGet("quiz/$quiz->qid/take");
    $this->drupalPost(NULL, array("question[$question->qid]" => 'the answer is the zero one infinity rule'), t('Finish'));
    $this->assertText('Your score: 100%');
  }

  /**
   * Test manually graded questions.
   *
   * Note: we use two questions here to make sure the grading form is handled
   * correctly.
   */
  public function testGradeAnswerManualFeedback() {
    $quiz = $this->drupalCreateQuiz();

    $question_1 = $this->testCreateQuizQuestion(array(
        'correct_answer_evaluation' => ShortAnswerQuestion::ANSWER_MANUAL,
        'correct_answer'            => 'the Zero One Infinity rule',
    ));
    $this->linkQuestionToQuiz($question_1, $quiz);

    $question_2 = $this->testCreateQuizQuestion(array(
        'correct_answer_evaluation' => ShortAnswerQuestion::ANSWER_MANUAL,
        'correct_answer'            => 'The number two is ridiculous and cannot exist',
    ));
    $this->linkQuestionToQuiz($question_2, $quiz);

    // Test correct.
    $this->drupalLogin($this->user);
    $this->drupalGet("quiz/$quiz->qid/take");
    $this->drupalPost(NULL, array("question[$question_1->qid]" => 'the answer is the zero one infinity rule'), t('Next'));
    $this->drupalPost(NULL, array("question[$question_2->qid]" => 'the number two really is ridiculous'), t('Finish'));
    $this->assertText('Your score: 0%');
    // Strange behavior - extra spaces in HTML.
    //$this->assertText('Score ? of 10');
    $this->assertText('This answer has not yet been scored.');
    $this->assertNoFieldByName('0[score]');
    $this->assertNoFieldByName('1[score]');
    $this->assertNoFieldByName('0[answer_feedback][value]');
    $this->assertNoFieldByName('1[answer_feedback][value]');
    $this->assertNoRaw(t('Save score'));
    $url_of_result = $this->getUrl();

    // Test grading the question, provide feedback.
    $this->drupalLogin($this->admin);
    $this->drupalGet($url_of_result);
    $this->assertFieldByName('0[score]');
    $this->assertFieldByName('1[score]');
    $this->drupalPost(NULL, array(
        "0[score]"                   => 2,
        "1[score]"                   => 3,
        "0[answer_feedback][value]"  => 'Feedback for answer 1.',
        "1[answer_feedback][value]"  => 'Feedback for answer 2.',
        "0[answer_feedback][format]" => 'filtered_html',
        "1[answer_feedback][format]" => 'filtered_html',
      ), t('Save score'));
    $this->assertText('The scoring data you provided has been saved.');

    // Test the score is visible to the user.
    $this->drupalLogin($this->user);
    $this->drupalGet($url_of_result);
    $this->assertText('You got 5 of 10 possible points.');
    $this->assertText('Your score: 50%');
    // Strange behavior - extra spaces in HTML.
    //$this->assertText('Score 2 of 5');
    //$this->assertText('Score 3 of 5');
    $this->assertText('Feedback for answer 1.');
    $this->assertText('Feedback for answer 2.');
  }

  /**
   * Test adding and taking a truefalse question.
   */
  function testCreateQuizQuestion($settings = NULL) {
    if (!$settings) {
      $settings = array(
          'correct_answer_evaluation' => ShortAnswerQuestion::ANSWER_INSENSITIVE_MATCH,
          'correct_answer'            => 'SA 1 correct answer.',
      );
    }

    return $this->drupalCreateQuestion(array(
          'type'  => $this->questionHandler,
          'title' => 'SA 1 title',
          'body'  => 'SA 1 body text.',
        ) + $settings);
  }

}
