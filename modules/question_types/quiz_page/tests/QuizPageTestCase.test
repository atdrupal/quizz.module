<?php

class QuizPageTestCase extends QuizQuestionTestCase {

  protected $questionHandler = 'quiz_page';

  public static function getInfo() {
    return array(
        'name'        => t('Quiz page'),
        'description' => t('Test cases for quiz pages'),
        'group'       => 'Quiz question',
    );
  }

  function setUp($modules = array(), $admin_permissions = array(), $user_permissions = array()) {
    $modules[] = 'quiz_page';
    $modules[] = 'truefalse';
    parent::setUp($modules, $admin_permissions, $user_permissions);
  }

  /**
   * Test adding and taking a quiz page question.
   */
  public function testCreateQuizQuestion($settings = array()) {
    return $this->drupalCreateQuestion(array(
          'type'  => $this->questionHandler,
          'title' => 'PG 1 title',
          'body'  => 'PG 1 body text.',
        ) + $settings);
  }

  /**
   * Test that question parentage saves.
   */
  public function testQuizPageParentage() {
    // Create Quiz with review of score.
    $quiz = $this->drupalCreateQuiz();

    // Create the questions & pages
    $question_1 = $this->drupalCreateQuestion(array('type' => 'truefalse', 'correct_answer' => 1, 'body' => 'TF 1 body text'));
    $question_2 = $this->drupalCreateQuestion(array('type' => 'truefalse', 'correct_answer' => 1, 'body' => 'TF 2 body text'));
    $question_3 = $this->drupalCreateQuestion(array('type' => 'truefalse', 'correct_answer' => 1, 'body' => 'TF 3 body text'));
    $page_1 = $this->drupalCreateQuestion(array('type' => 'quiz_page'));
    $page_2 = $this->drupalCreateQuestion(array('type' => 'quiz_page'));
    $this->linkQuestionToQuiz($question_1, $quiz);
    $this->linkQuestionToQuiz($question_2, $quiz);
    $this->linkQuestionToQuiz($question_3, $quiz);
    $this->linkQuestionToQuiz($page_1, $quiz);
    $this->linkQuestionToQuiz($page_2, $quiz);

    // Go to the manage questions form.
    $this->drupalLogin($this->admin);
    $this->drupalGet("quiz/$quiz->qid/questions");
    $post = array(
        // Make the questions have parents.
        "qr_pids[{$question_1->qid}-{$question_1->vid}]" => 4,
        "qr_pids[{$question_2->qid}-{$question_2->vid}]" => 4,
        "qr_pids[{$question_3->qid}-{$question_3->vid}]" => 5,
        // Mirror what JS would have done by adjusting the weights.
        "weights[{$page_1->qid}-{$page_1->vid}]"         => 2,
        "weights[{$question_1->qid}-{$question_1->vid}]" => 3,
        "weights[{$question_2->qid}-{$question_2->vid}]" => 4,
        "weights[{$page_2->qid}-{$page_2->vid}]"         => 3,
        "weights[{$question_3->qid}-{$question_3->vid}]" => 4,
    );
    $this->drupalPost(NULL, $post, t('Submit'));

    $sql = "SELECT * FROM {quiz_relationship}";
    $data = db_query($sql)->fetchAllAssoc('qr_id');
    // Check the relationships properly saved.
    foreach ($data as $qr_id => $rel) {
      switch ($qr_id) {
        case 1:
        case 2:
          $this->assertEqual($rel->qr_pid, 4);
          break;
        case 3:
          $this->assertEqual($rel->qr_pid, 5);
          break;
        case 4:
        case 5:
          $this->assertNull($rel->qr_pid);
          break;
      }
    }

    // Take the quiz. Ensure the pages are correct.
    $this->drupalLogin($this->user);
    $this->drupalGet("quiz/{$quiz->qid}/take");
    // Questions 1 and 2 are present. Question 3 is hidden.
    $this->assertFieldByName("question[{$question_1->qid}]");
    $this->assertFieldByName("question[{$question_2->qid}]");
    $this->assertNoFieldByName("question[{$question_3->qid}]");
    $this->drupalPost(NULL, array(
        "question[{$question_1->qid}]" => 1,
        "question[{$question_2->qid}]" => 1), t('Next'));
    // Questions 1 and 2 are gone. Question 3 is present.
    $this->assertNoFieldByName("question[{$question_1->qid}]");
    $this->assertNoFieldByName("question[{$question_2->qid}]");
    $this->assertFieldByName("question[{$question_3->qid}]");
    $this->drupalPost(NULL, array("question[{$question_3->qid}]" => 1), t('Finish'));

    // Check that the results page contains all the questions.
    $this->assertText('You got 3 of 3 possible points.');
    $this->assertText('TF 1 body text');
    $this->assertText('TF 2 body text');
    $this->assertText('TF 3 body text');
  }

}
