<?php

/**
 * Sponsored by: Norwegian Centre for Telemedicine
 * Code: falcon
 *
 * @file
 * Scale Install (a quiz question type)
 */

/**
 * Implements hook_install().
 */
function quizz_scale_install() {
  _scale_insert_collection(array('Always', 'Very often', 'Some times', 'Rarely', 'Very rarely', 'Never'));
  _scale_insert_collection(array('Excellent', 'Very good', 'Good', 'Ok', 'Poor', 'Very poor'));
  _scale_insert_collection(array('Totally agree', 'Agree', 'Not sure', 'Disagree', 'Totally disagree'));
  _scale_insert_collection(array('Very important', 'Important', 'Moderately important', 'Less important', 'Least important'));
  variable_set('node_options_scale', array('status'));
}

/**
 * Implements hook_schema().
 */
function quizz_scale_schema() {
  $schema['quiz_scale_collections'] = array(
      'description' => 'Answer collection ids and properties',
      'fields'      => array(
          'id'      => array('type' => 'serial', 'unsigned' => TRUE, 'not null' => TRUE),
          'name'    => array('type' => 'varchar', 'length' => 255, 'not null' => FALSE, 'description' => 'The machine-readable name of this collection.'),
          'label'   => array('type' => 'varchar', 'length' => 255, 'not null' => FALSE, 'default' => '', 'description' => 'The human-readable name of this collection.'),
          'uid'     => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0, 'description' => 'Author ID of collection.'),
          'for_all' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0, 'description' => '1 for global presets, 0 otherwise'),
          'data'    => array('type' => 'text', 'not null' => FALSE, 'size' => 'big', 'serialize' => TRUE, 'description' => 'A serialized array of additional data related to this collection.'),
          'module'  => array('type' => 'varchar', 'length' => 255, 'not null' => FALSE, 'description' => 'The name of the providing module if the entity has been defined in code.'),
          'status'  => array('type' => 'int', 'not null' => FALSE, 'default' => 0x01, 'size' => 'tiny', 'description' => 'The exportable status of the entity.'),
      ),
      'primary key' => array('id'),
  );

  // Store collection's items.
  $schema['quiz_scale_answer'] = array(
      'description' => 'Holds all the possible answers and what answer collections they belong to',
      'fields'      => array(
          'id'                   => array('type' => 'serial', 'unsigned' => TRUE, 'not null' => TRUE),
          'answer_collection_id' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE),
          'answer'               => array('type' => 'text'),
      ),
      'primary key' => array('id'),
  );

  $schema['quiz_scale_properties'] = array(
      'description' => 'Properties specific to this question type. Holds information about what answer collection this question uses',
      'fields'      => array(
          'qid'                  => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'description' => 'Question ID'),
          'vid'                  => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'description' => 'Question VID'),
          'answer_collection_id' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE),
      ),
      'primary key' => array('qid', 'vid'),
  );

  // Stores the users answers to a question.
  $schema['quiz_scale_user_answers'] = array(
      'description' => 'Store the users answers',
      'fields'      => array(
          'answer_id'    => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE),
          'result_id'    => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE),
          'question_qid' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE),
          'question_vid' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE),
      ),
      'primary key' => array(
          'result_id', 'question_qid', 'question_vid'
      ),
  );

  // @TODO: Remove me
  $schema['quiz_scale_user'] = array(
      'description' => 'User settings, store what answer collections the user have as presets',
      'fields'      => array(
          'uid'                  => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE),
          'answer_collection_id' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE),
      ),
      'primary key' => array('uid', 'answer_collection_id'),
  );

  return $schema;
}

/**
 * Implements hook_uninstall().
 */
function quizz_scale_uninstall() {
  variable_del('scale_max_num_of_alts');
  cache_clear_all('variables', 'cache');
  drupal_set_message(t('The Scale module has been uninstalled. Scale nodes may still exist, but they will not function properly.'));
}

/**
 * Inserts answer collections into the database
 *
 * @param $options
 *  Array of answers to include in the answer collection
 */
function _scale_insert_collection($options) {
  // Save the collection as a global preset
  $collection = entity_create('scale_collection', array('for_all' => TRUE));
  $collection->save();

  // Save the collections as a preset collection for user 1
  db_insert('quiz_scale_user')
    ->fields(array('answer_collection_id' => $collection->id, 'uid' => 1))
    ->execute();

  $insert = db_insert('quiz_scale_answer')->fields(array('answer_collection_id', 'answer'));
  $values = array();
  // Save the answers belonging to the collection
  for ($i = 0; $i < count($options); $i++) {
    $values = array('answer_collection_id' => $collection->id, 'answer' => $options[$i]);
    $insert->values($values);
  }
  $insert->execute();
}

/**
 * Change schema per structure of question is changed.
 */
function quizz_scale_update_7600() {
  db_rename_table('quiz_scale_node_properties', 'quiz_scale_properties');

  $spec_1 = array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE);
  db_change_field('quiz_scale_properties', 'nid', 'qid', $spec_1);

  $spec_2 = array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE);
  db_change_field('quiz_scale_user_answers', 'question_nid', 'question_qid', $spec_2);
}

/**
 * Convert global configuration for questions to question type entity.
 */
function quizz_scale_update_7601() {
  foreach (quiz_question_get_types() as $question_type) {
    if ('scale' === $question_type->plugin) {
      $question_type
        ->setConfig('scale_max_num_of_alts', variable_get('scale_max_num_of_alts', 10))
        ->save()
      ;
    }
  }
}

/**
 * Rename {quiz_scale_answer_collection} to {quiz_scale_collections}
 */
function quizz_scale_update_7602() {
  db_rename_table('quiz_scale_answer_collection', 'quiz_scale_collections');
}

/**
 * Add more columns for {quiz_scale_collections}
 */
function quizz_scale_update_7603() {
  db_add_field('quiz_scale_collections', 'name', array('type' => 'varchar', 'length' => 255, 'not null' => FALSE, 'description' => 'The machine-readable name of this collection.'));
  db_add_field('quiz_scale_collections', 'label', array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => '', 'description' => 'The human-readable name of this collection.'));
  db_add_field('quiz_scale_collections', 'uid', array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0, 'description' => 'Author ID of collection.'));
  db_add_field('quiz_scale_collections', 'data', array('type' => 'text', 'not null' => FALSE, 'size' => 'big', 'serialize' => TRUE, 'description' => 'A serialized array of additional data related to this collection.'));
  db_add_field('quiz_scale_collections', 'module', array('type' => 'varchar', 'length' => 255, 'not null' => FALSE, 'description' => 'The name of the providing module if the entity has been defined in code.'));
  db_add_field('quiz_scale_collections', 'status', array('type' => 'int', 'not null' => TRUE, 'default' => 0x01, 'size' => 'tiny', 'description' => 'The exportable status of the entity.'));
  drupal_flush_all_caches();

  // Create default name for current collections
  $collections = entity_load('scale_collection', FALSE, array());
  foreach ($collections as $collection) {
    $collection->module = 'scale';
    $collection->name = 'collection_' . $collection->id;
    if (1 < count($collection->options)) {
      $options = $collection->options;
      $first = array_shift($options);
      $last = array_pop($options);
      $collection->label = "{$first} - {$last}";
    }
    $collection->save();
  }

  // collection name is not required column
  db_change_field('quiz_scale_collections', 'name', 'name', array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'description' => 'The machine-readable name of this collection.'));
}

/**
 * Update data per structure changed for scale collection.
 */
function quizz_scale_update_7604() {
  $rows = db_select('quiz_scale_user')
    ->fields('quiz_scale_user')
    ->orderBy('answer_collection_id')
    ->execute()
    ->fetchAll();

  foreach ($rows as $row) {
    db_update('quiz_scale_collections')
      ->fields(array('uid' => $row->uid))
      ->condition('id', $row->answer_collection_id)
      ->execute();
  }
}

/**
 * Drop {quiz_scale_user}
 */
//function quizz_scale_update_7605() {
//  db_drop_table('quiz_scale_user');
//}
