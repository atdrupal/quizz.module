<?php

use Drupal\quiz_question\Entity\QuestionType;

/**
 * The main file for scale.
 *
 * Sponsored by: Norwegian Centre for Telemedicine
 * Code: falcon
 *
 * @file
 * Scale question type for the Quiz module.
 *
 * Allows the creation of scale questions (ex: likert scale)
 */

/**
 * Implements hook_help().
 */
function scale_help($path, $args) {
  if ($path == 'admin/help#scale') {
    return t('This module provides a scale question type for Quiz. It may be used to construct surveys.');
  }
}

/**
 * Implements hook_menu().
 */
function scale_menu() {
  $items['scale/collection/manage'] = array(
      'type'             => MENU_SUGGESTED_ITEM,
      'title'            => 'Manage your preset collections',
      'access callback'  => 'node_access',
      'access arguments' => array('create', 'scale'),
      'file'             => 'scale.pages.inc',
      'page callback'    => 'drupal_get_form',
      'page arguments'   => array('scale_manage_collection_form'),
  );
  return $items;
}

/**
 * Implements hook_theme().
 */
function scale_theme($existing, $type, $theme, $path) {
  $module_path = drupal_get_path('module', 'scale');
  return array(
      'scale_creation_form'    => array(
          'render element' => 'form',
          'path'           => $module_path . '/theme',
          'file'           => 'scale.theme.inc',
      ),
      'scale_response_form'    => array(
          'render element' => 'form',
          'path'           => $module_path . '/theme',
          'file'           => 'scale.theme.inc',
      ),
      'scale_answer_node_view' => array(
          'variables' => array(
              'alternatives' => NULL,
          ),
          'path'      => $module_path . '/theme',
          'file'      => 'scale.theme.inc',
      ),
      'scale_answering_form'   => array(
          'render element' => 'form',
          'path'           => $module_path . '/theme',
          'template'       => 'scale-answering-form',
      ),
  );
}

/**
 * Implements hook_permission().
 */
function scale_permission() {
  return array(
      'Edit global presets' => array(
          'title' => t('Administer presets'),
      ),
  );
}

/**
 * Implements hook_quiz_question_info().
 */
function scale_quiz_question_info() {
  return array(
      'scale' => array(
          'name'              => t('Scale question'),
          'description'       => t('Quiz questions that allow a user to choose from a scale.'),
          'question provider' => 'ScaleQuestion',
          'response provider' => 'ScaleResponse',
          'module'            => 'quiz_question', // All wrapper functions are in that module.
      ),
  );
}

/**
 * Implements hook_quiz_question_config().
 */
function scale_quiz_question_config(QuestionType $question_type) {
  $form['manage'] = array('#markup' => l(t('Manage presets'), 'scale/collection/manage'));
  $form['scale_max_num_of_alts'] = array(
      '#type'          => 'textfield',
      '#title'         => t('Maximum number of alternatives allowed'),
      '#default_value' => $question_type->getConfig('scale_max_num_of_alts', 10),
  );
  $form['#validate'][] = 'scale_config_validate';
  return $form;
}

/**
 * Validate the scale config form values
 */
function scale_config_validate($form, $form_state) {
  if (!quiz_valid_integer($form_state['values']['scale_max_num_of_alts'], 2, 50)) {
    form_set_error('scale_max_num_of_alts', t('The number of alternatives must be between 2 and 50'));
  }
}

/**
 * Implements hook_get_answer().
 */
function scale_get_answer($question_qid, $question_vid, $result_id) {
  $results = db_query('SELECT answer_id, question_vid, question_qid, result_id
    FROM {quiz_scale_user_answers}
    WHERE question_qid = :question_id AND question_vid = :qvid AND result_id = :rid', array(
      ':question_id' => $question_qid,
      ':qvid'        => $question_vid,
      ':rid'         => $result_id))->fetchAssoc();
  return $results ? $results : FALSE;
}

/**
 * Implements hook_user_cancel().
 */
function scale_user_cancel($edit, $account, $method) {
  $results = db_query('SELECT id FROM {quiz_scale_answer_collection} ac
              JOIN {quiz_scale_user} u ON(ac.id = u.answer_collection_id)
              WHERE uid = :uid
              AND ac.for_all = :for_all
              AND ac.id NOT IN
                (SELECT answer_collection_id
                 FROM {quiz_scale_properties})
              AND ac.id NOT IN
                (SELECT answer_collection_id
                 FROM {quiz_scale_user}
                 WHERE NOT uid = :uid)', array(':uid' => $account->uid, ':for_all' => 0));
  foreach ($results as $result) {
    db_delete('quiz_scale_answer')
      ->condition('answer_collection_id', $result->id)
      ->execute();
    db_delete('quiz_scale_answer_collection')
      ->condition('id', $result->id)
      ->execute();
  }

  db_delete('quiz_scale_user')
    ->condition('uid', $account->uid)
    ->execute();
}

/**
 * Searches a string for the answer collection id
 *
 * @param $string
 * @return answer collection id
 */
function _scale_get_col_id($string) {
  $res = array();
  $success = preg_match('/^collection([0-9]{1,}|new)$/', $string, $res);
  return ($success > 0) ? $res[1] : FALSE;
}

/**
 * Make sure an answer collection isn't a preset for a given user.
 *
 * @param $col_id
 *  Answer_collection_id
 * @param $user_id
 */
function _scale_unpreset_collection($col_id, $user_id) {
  db_delete('quiz_scale_user')
    ->condition('answer_collection_id', $col_id)
    ->condition('uid', $user_id)
    ->execute();
  if (user_access('Edit global presets')) {
    db_update('quiz_scale_answer_collection')
      ->fields(array('for_all' => 0))
      ->execute();
  }
}

/**
 * Make an answer collection (un)available for all question creators.
 *
 * @param $new_col_id
 *  Answer collection id
 * @param $for_all
 *  0 if not for all,
 *  1 if for all
 */
function _scale_set_for_all($new_col_id, $for_all) {
  db_update('quiz_scale_answer_collection')
    ->fields(array(
        'for_all' => $for_all,
    ))
    ->condition('id', $new_col_id)
    ->execute();
}
