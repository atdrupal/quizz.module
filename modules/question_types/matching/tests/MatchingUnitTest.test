<?php

/**
 * Test class for matching questions.
 */
class MatchingTestCase extends QuizQuestionTestCase {

  protected $questionPlugin = 'matching';

  public static function getInfo() {
    return array(
        'name'        => t('Matching'),
        'description' => t('Unit test for matching question type.'),
        'group'       => t('Quiz question'),
    );
  }

  public function setUp($modules = array(), $admin_permissions = array(), $user_permissions = array()) {
    $modules[] = 'matching';
    parent::setUp($modules, $admin_permissions, $user_permissions);
  }

  /**
   * function to create true false type question entity for testing.
   */
  private function createQuizQuestion() {
    $settings = array(
        'type'           => $this->questionPlugin,
        'title'          => $this->randomName(),
        'body'           => $this->randomString(),
        'revisions'      => TRUE,
        'choice_penalty' => 0,
    );

    // generate rand match question, answer and feedback
    for ($i = 1; $i < 5; $i++) { # 5 => $question_type->getConfig('quiz_matching_form_size', 5)
      $settings['match'][$i]['question'] = 'Can you say #' . $i . '?';
      $settings['match'][$i]['answer'] = 'Number ' . $i;
      $settings['match'][$i]['feedback'] = 'Correct result is: "Number ' . $i . '"';
    }

    return $this->drupalCreateQuestion($settings);
  }

  public function testTaking() {
    $quiz = $this->drupalCreateQuiz();
    $question = $this->createQuizQuestion();
    $this->linkQuestionToQuiz($question, $quiz);

    $this->drupalLogin($this->user);
    $this->drupalGet("quiz/$quiz->qid/take");
    $this->drupalPost(NULL, array(
        "question[{$question->qid}][1]" => '1',
        "question[{$question->qid}][2]" => '2',
        "question[{$question->qid}][3]" => '3',
        "question[{$question->qid}][4]" => '1', // wrongs
      ), t('Finish'));

    $this->assertText('You got 3 of 4 possible points.');
    $this->assertText('Your score: 75%');
    $this->assertText('Correct result is: "Number 1"');
    $this->assertText('Correct result is: "Number 2"');
    $this->assertText('Correct result is: "Number 3"');
    $this->assertText('Correct result is: "Number 4"');
  }

}
