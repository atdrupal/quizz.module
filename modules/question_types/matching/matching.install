<?php

/**
 * @file
 * matching install file.
 */

/**
 * Implements hook_install().
 */
function matching_install() {
  variable_set('node_options_matching', array('status'));
}

/**
 * Implements hook_schema().
 */
function matching_schema() {
  // Properties for a question nodes go in here:
  $schema['quiz_matching_properties'] = array(
      'fields'      => array(
          'qid'            => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE),
          'vid'            => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE),
          'choice_penalty' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0),
      ),
      'primary key' => array('qid', 'vid'),
  );

  $schema['quiz_matching_question'] = array(
      'fields'      => array(
          'match_id' => array('type' => 'serial', 'unsigned' => TRUE, 'not null' => TRUE),
          'qid'      => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE),
          'vid'      => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE),
          'question' => array('type' => 'text', 'not null' => TRUE),
          'answer'   => array('type' => 'text', 'not null' => TRUE),
          'feedback' => array('type' => 'text', 'not null' => TRUE),
      ),
      'primary key' => array('match_id'),
      'indexes'     => array(
          'question_id' => array('qid', 'vid'),
      ),
  );

  // User answers go in here.
  $schema['quiz_matching_user_answers'] = array(
      'fields'      => array(
          'answer_id' => array('type' => 'serial', 'unsigned' => TRUE, 'not null' => TRUE),
          'match_id'  => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE),
          'result_id' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE),
          'score'     => array('type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0),
          'answer'    => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE),
      ),
      'primary key' => array('answer_id'),
  );

  return $schema;
}

/**
 * Implements hook_update_N()
 */

/**
 * Add a table to store properties for the matching questions
 */
function matching_update_7400() {
  $schema = array(
      'fields'      => array(
          'nid'            => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE),
          'vid'            => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE),
          'choice_penalty' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0),
      ),
      'primary key' => array('nid', 'vid'),
  );

  db_create_table('quiz_matching_properties', $schema);

  // Insert default properties for all of the existing matching questions
  $result = db_query("SELECT nid, vid FROM {node} WHERE type='matching'");

  foreach ($result as $question) {
    db_insert('quiz_matching_properties')
      ->fields(array(
          'nid'            => $question->nid,
          'vid'            => $question->vid,
          'choice_penalty' => 0,
      ))
      ->execute();
  }
}

/**
 * Update schema per question structure changed.
 */
function matching_update_7600() {
  $spec_1 = array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE);
  db_change_field('quiz_matching_properties', 'nid', 'qid', $spec_1);

  db_rename_table('quiz_matching_node', 'quiz_matching_question');
  $spec_2 = array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE);
  db_change_field('quiz_matching_question', 'nid', 'qid', $spec_2);
}

/**
 * Convert global configuration for questions to question type entity.
 */
function matching_update_7601() {
  foreach (quiz_question_get_types() as $question_type) {
    if ('matching' === $question_type->handler) {
      $question_type
        ->setConfig('quiz_matching_form_size', variable_get('quiz_matching_form_size', TRUE))
        ->setConfig('quiz_matching_shuffle_options', variable_get('quiz_matching_shuffle_options', TRUE))
        ->save()
      ;
    }
  }
}
