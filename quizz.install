<?php

use Drupal\quizz\Schema\Schema7060;

/**
 * @file
 * Quiz install schema for installing the quiz module
 */
require_once dirname(__FILE__) . '/includes/update/quiz.update_before_7600.inc';

/**
 * Implements hook_install().
 */
function quiz_install() {
  // Create default quiz type. In case the module is installed via an
  // installation profile, skip that.
  if (!drupal_installation_attempted()) {
    $quiz_type = entity_create('quiz_type', array('type' => 'quiz', 'label' => t('Quiz'), 'weight' => 0));
    $quiz_type->save();
  }

  drupal_set_message(t('Quiz module has been enabled. To !create_a_quiz go to Create Content -> Quiz.', array(
      '!create_a_quiz' => l(t('create a quiz'), 'quiz/add')
  )));
}

/**
 * Implements hook_schema().
 */
function quiz_schema() {
  require_once dirname(__FILE__) . '/src/Schema/Schema7060.php';
  $schema = new Schema7060();
  return $schema->get();
}

/**
 * Implements hook_update_N()
 */
// should have been named quiz_update_7400
function quiz_update_7100(&$sandbox) {
  db_add_field('quiz_node_properties', 'show_passed', array('type' => 'int', 'not null' => TRUE, 'default' => 1, 'size' => 'tiny'));
  return t('Show passed field added to quiz config.');
}

/**
 * Implements hook_uninstall().
 */
function quiz_uninstall() {
  db_delete('variable')
    ->condition('name', "quiz_%", 'like')
    ->execute();
}

/**
 * Enable required modules for quiz-6.x
 */
function quiz_update_7599() {
  module_enable(array('ctools', 'entity', 'filter', 'views', 'views_bulk_operations', 'xautoload'));
  registry_rebuild();
  drupal_flush_all_caches();
  drupal_static_reset();
}

/**
 * Update schema for quiz when it becomes entity.
 */
function quiz_update_7600() {
  require_once dirname(__FILE__) . '/src/Schema/Schema7060.php';
  $schema = new Schema7060();
  $tables = $schema->get();

  db_create_table('quiz_type', $tables['quiz_type']);
  db_create_table('quiz_entity', $tables['quiz_entity']);
  db_create_table('quiz_entity_revision', $tables['quiz_entity_revision']);

  // Flush cache to make sure the question entity types is defined
  drupal_flush_all_caches();

  return 'Create tables: quiz_type, quiz_entity, quiz_entity_revision.';
}

/**
 * Update schema for quiz when it becomes entity.
 */
function quiz_update_7601() {
  db_rename_table('quiz_node_relationship', 'quiz_relationship');
  db_change_field('quiz_relationship', 'qnr_id', 'qr_id', array('type' => 'serial', 'size' => 'normal', 'unsigned' => TRUE, 'not null' => TRUE));
  db_change_field('quiz_relationship', 'parent_nid', 'quiz_qid', array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE));
  db_change_field('quiz_relationship', 'parent_vid', 'quiz_vid', array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE));
  db_change_field('quiz_relationship', 'child_nid', 'question_qid', array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE));
  db_change_field('quiz_relationship', 'child_vid', 'question_vid', array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE));

  db_rename_table('quiz_node_results', 'quiz_results');
  db_change_field('quiz_results', 'nid', 'quiz_qid', array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'description' => 'ID of quiz entity'));
  db_change_field('quiz_results', 'vid', 'quiz_vid', array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'description' => 'Version ID of quiz entity'));

  db_rename_table('quiz_node_result_options', 'quiz_result_options');
  db_change_field('quiz_result_options', 'nid', 'quiz_qid', array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'description' => 'ID of quiz entity'));
  db_change_field('quiz_result_options', 'vid', 'quiz_vid', array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'description' => 'Version ID of quiz entity'));
  db_rename_table('quiz_node_results_answers', 'quiz_results_answers');

  db_change_field('quiz_terms', 'nid', 'qid', array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'description' => 'Question ID'));
}

/**
 * Convert quiz nodes to quiz entity
 */
function quiz_update_7602() {
  // create temp columns quiz_revision.{node_nid, node_vid} to save old data
  db_add_field('quiz_entity', 'node_nid', array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0));
  db_add_index('quiz_entity', 'quiz_node', array('node_nid'));
  db_add_field('quiz_entity_revision', 'node_vid', array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0));

  // create default quiz type
  $quiz_type = entity_create('quiz_type', array(
      'type'   => 'quiz',
      'label'  => t('Quiz'),
      'weight' => 0,
      'data'   => array(
          'multilingual' => (int) variable_get('language_content_type_quiz', 0)
      )
  ));
  $quiz_type->save();

  // migrate basic quiz
  $select = db_select('node', 'n');
  $select->innerJoin('node_revision', 'r', 'n.nid = r.nid');
  $select->fields('r', array('nid', 'vid', 'uid', 'title', 'log', 'timestamp', 'status'));
  $select->fields('n', array('created', 'type', 'language'));
  $select->condition('n.type', 'quiz');
  $select->orderBy('r.vid', 'ASC');
  $results = $select->execute()->fetchAll();

  foreach ($results as $row) {
    _quiz_update_7602($row);
  }
}

/**
 * Create quiz revision with quiz-node basic data.
 *
 * @param stdClass $row
 */
function _quiz_update_7602($row) {
  // find quiz revision
  if ($quiz_id = db_query('SELECT qid FROM {quiz_entity} WHERE node_nid = :nid', array(':nid' => $row->nid))->fetchColumn()) {
    $quiz = quiz_load($quiz_id);
  }
  else {
    $quiz = entity_create('quiz_entity', array(
        'type'     => 'quiz',
        'status'   => $row->status,
        'uid'      => $row->uid,
        'language' => $row->language,
        'title'    => $row->title,
        'created'  => $row->created,
        'changed'  => $row->timestamp,
        'node_nid' => $row->nid,
        'node_vid' => $row->vid,
    ));
  }

  $quiz->is_new_revision = 1;
  $quiz->log = $row->log;
  $quiz->save();
}

/**
 * Convet quiz-node fields data to quiz entity
 */
function quiz_update_7603() {
  // quiz node type is defined by quiz.module, but this modules no longer powers
  // it. Reown to core 'node' module.
  db_update("UDPATE {node_type} set module = 'node' WHERE type='quiz'");

  $field_instances = field_info_instances('node', 'quiz');
  $field_names = array_keys($field_instances);

  // copy fields from quiz node to quiz entity
  foreach ($field_instances as $name => $instance) {
    if ('body' === $name) { // body field is auto created via internal API
      continue;
    }

    unset($instance['id']);
    $instance['entity_type'] = 'quiz_entity';
    $instance['bundle'] = 'quiz';
    field_create_instance($instance);
  }

  // migrate basic quiz
  $select = db_select('node', 'n');
  $select->innerJoin('node_revision', 'r', 'n.nid = r.nid');
  $select->fields('r', array('nid', 'vid'));
  $select->condition('n.type', 'quiz');
  $result = $select->execute()->fetchAll();
  foreach ($result as $row) {
    $quiz_node = node_load($row->nid, $row->vid);
    _quiz_update_7603($quiz_node, $field_names);
  }
}

function _quiz_update_7603($quiz_node, $field_names) {
  $sql = 'SELECT vid FROM {quiz_entity_revision} WHERE node_vid = :vid';
  if ($quiz_vid = db_query($sql, array(':vid' => $quiz_node->vid))->fetchColumn()) {
    $quiz = quiz_load(NULL, $quiz_vid);
    foreach ($field_names as $field_name) {
      if (empty($quiz_node->{$field_name})) {
        continue;
      }

      if ('body' === $field_name) {
        $quiz->quiz_body = $quiz_node->body;
      }
      else {
        $quiz->{$field_name} = $quiz_node->{$field_name};
      }
    }
    $quiz->save();
  }
}

/**
 * Change path aliases from quiz-node to quiz-entity
 */
function quiz_update_7604() {
  $select = db_select('quiz_entity');
  $select->fields('quiz_entity', array('qid', 'node_nid'));
  $result = $select->execute()->fetchAll();
  foreach ($result as $row) {
    if ($path = path_load("node/{$row->node_nid}")) {
      $path['source'] = "quiz/{$row->qid}";
      path_save($path);
    }
  }
}

/**
 * Clean up data of when quiz was node.
 */
function quiz_update_7605() {
  # db_drop_table('quiz_node_properties');
  # delete all quiz nodes?
  # delete quiz node type?

  db_drop_index('quiz_entity', 'quiz_node');
  db_drop_field('quiz_entity', 'node_nid');
  db_drop_field('quiz_entity_revision', 'node_vid');
}
